
import { apiService } from '../apiService';
import { BaseService } from './baseService';
import mongoMachineService from '../mongodb/machineService';
import { isWeb } from '../../utils/platform';
import { toast } from '@/components/ui/use-toast';

export interface MachineData {
  name: string;
  type: string;
  description: string;
  status: string;
  requiresCertification?: boolean;
  difficulty?: string;
  imageUrl?: string;
  details?: string;
  specifications?: string;
  certificationInstructions?: string;
  linkedCourseId?: string;
  linkedQuizId?: string;
}

/**
 * Service that handles all machine-related database operations.
 */
export class MachineDatabaseService extends BaseService {
  async getMachineStatus(machineId: string): Promise<string> {
    try {
      console.log(`Getting machine status for ID: ${machineId}`);
      
      // First try MongoDB for native apps
      if (!isWeb) {
        const mongoStatus = await mongoMachineService.getMachineStatus(machineId);
        if (mongoStatus) {
          console.log(`Got machine status from MongoDB: ${mongoStatus.status}`);
          return mongoStatus.status;
        }
      }
      
      // Then try the API
      const response = await apiService.request(`machines/${machineId}`, 'GET');
      if (response.data) {
        console.log(`Got machine status from API: ${response.data.status}`);
        return response.data.status;
      }
    } catch (error) {
      console.error("API error, using default machine status:", error);
    }
    
    // Default to available if API fails
    return 'Available';
  }
  
  async updateMachineStatus(machineId: string, status: string, note?: string): Promise<boolean> {
    try {
      console.log(`Updating machine status: ID=${machineId}, status=${status}`);
      
      // First try MongoDB for native apps
      let success = false;
      if (!isWeb) {
        success = await mongoMachineService.updateMachineStatus(machineId, status, note);
        if (success) {
          console.log(`Updated machine status in MongoDB: ${status}`);
          return true;
        }
      }
      
      // Then try the API
      const response = await apiService.request(`machines/${machineId}/status`, 'PUT', { status, note }, true);
      return !response.error;
    } catch (error) {
      console.error("API error, could not update machine status:", error);
      return false;
    }
  }

  async createMachine(machineData: MachineData): Promise<any> {
    try {
      console.log("Creating new machine with data:", machineData);
      
      // First try MongoDB for native apps
      if (!isWeb) {
        console.log("Attempting to create machine in MongoDB");
        const mongoMachine = await mongoMachineService.addMachine({
          _id: '', // Will be generated by MongoDB
          name: machineData.name,
          type: machineData.type,
          description: machineData.description,
          status: machineData.status || 'Available',
          requiresCertification: machineData.requiresCertification !== undefined ? machineData.requiresCertification : true,
          difficulty: machineData.difficulty || 'Intermediate',
          imageUrl: machineData.imageUrl || '/placeholder.svg',
          details: machineData.details,
          specifications: machineData.specifications,
          certificationInstructions: machineData.certificationInstructions,
          linkedCourseId: machineData.linkedCourseId,
          linkedQuizId: machineData.linkedQuizId
        });
        
        if (mongoMachine) {
          console.log("Successfully created machine in MongoDB:", mongoMachine);
          
          // Format response to match API format
          return {
            id: mongoMachine._id,
            _id: mongoMachine._id,
            ...mongoMachine
          };
        }
      }
      
      // Then try the API
      const response = await apiService.request('machines', 'POST', machineData, true);
      console.log("Machine creation API response:", response);
      
      if (response.data) {
        return response.data;
      } else if (response.error) {
        throw new Error(response.error);
      }
      
      throw new Error("Failed to create machine: No data returned from API");
    } catch (error) {
      console.error("Error creating machine:", error);
      toast({
        title: "Error creating machine",
        description: error instanceof Error ? error.message : "Unknown error",
        variant: "destructive"
      });
      throw new Error("Failed to create machine: " + (error instanceof Error ? error.message : "Unknown error"));
    }
  }

  async updateMachine(machineId: string, machineData: Partial<MachineData>): Promise<any> {
    try {
      console.log(`Updating machine ${machineId} with data:`, machineData);
      
      // First try MongoDB for native apps
      if (!isWeb) {
        const mongoMachine = await mongoMachineService.updateMachine(machineId, machineData as any);
        if (mongoMachine) {
          console.log("Successfully updated machine in MongoDB:", mongoMachine);
          
          // Format response to match API format
          return {
            id: mongoMachine._id,
            _id: mongoMachine._id,
            ...mongoMachine
          };
        }
      }
      
      // Then try the API
      const response = await apiService.request(`machines/${machineId}`, 'PUT', machineData, true);
      return response.data;
    } catch (error) {
      console.error(`API error, could not update machine ${machineId}:`, error);
      throw new Error("Failed to update machine: " + (error instanceof Error ? error.message : "Unknown error"));
    }
  }

  async deleteMachine(machineId: string): Promise<boolean> {
    try {
      console.log(`Deleting machine: ${machineId}`);
      
      // First try MongoDB for native apps
      if (!isWeb) {
        const success = await mongoMachineService.deleteMachine(machineId);
        if (success) {
          console.log(`Successfully deleted machine from MongoDB: ${machineId}`);
          return true;
        }
      }
      
      // Then try the API
      const response = await apiService.request(`machines/${machineId}`, 'DELETE', undefined, true);
      return !response.error;
    } catch (error) {
      console.error(`API error, could not delete machine ${machineId}:`, error);
      return false;
    }
  }

  async getAllMachines(): Promise<any[]> {
    try {
      console.log("Fetching all machines");
      
      // First try MongoDB for native apps
      if (!isWeb) {
        const mongoMachines = await mongoMachineService.getMachines();
        if (mongoMachines && mongoMachines.length > 0) {
          console.log(`Fetched ${mongoMachines.length} machines from MongoDB`);
          
          // Format MongoDB machines to match API format
          return mongoMachines.map(machine => ({
            id: machine._id,
            _id: machine._id,
            ...machine
          }));
        }
      }
      
      // Then try the API
      const response = await apiService.request('machines', 'GET');
      console.log(`Fetched ${response.data?.length || 0} machines from API`);
      return response.data || [];
    } catch (error) {
      console.error("API error, could not get all machines:", error);
      
      // Try MongoDB as fallback if API fails
      if (!isWeb) {
        try {
          const mongoMachines = await mongoMachineService.getMachines();
          console.log(`Fetched ${mongoMachines.length} machines from MongoDB (fallback)`);
          
          // Format MongoDB machines to match API format
          return mongoMachines.map(machine => ({
            id: machine._id,
            _id: machine._id,
            ...machine
          }));
        } catch (mongoError) {
          console.error("MongoDB fallback error:", mongoError);
        }
      }
      
      return [];
    }
  }

  async getMachineById(machineId: string): Promise<any> {
    try {
      console.log(`Fetching machine details for ID: ${machineId}`);
      
      // First try MongoDB for native apps
      if (!isWeb) {
        const mongoMachine = await mongoMachineService.getMachineById(machineId);
        if (mongoMachine) {
          console.log(`Fetched machine from MongoDB: ${mongoMachine.name}`);
          
          // Format MongoDB machine to match API format
          return {
            id: mongoMachine._id,
            _id: mongoMachine._id,
            ...mongoMachine
          };
        }
      }
      
      // Then try the API
      const response = await apiService.request(`machines/${machineId}`, 'GET');
      return response.data;
    } catch (error) {
      console.error(`API error, could not get machine ${machineId}:`, error);
      
      // Try MongoDB as fallback if API fails
      if (!isWeb) {
        try {
          const mongoMachine = await mongoMachineService.getMachineById(machineId);
          if (mongoMachine) {
            console.log(`Fetched machine from MongoDB (fallback): ${mongoMachine.name}`);
            
            // Format MongoDB machine to match API format
            return {
              id: mongoMachine._id,
              _id: mongoMachine._id,
              ...mongoMachine
            };
          }
        } catch (mongoError) {
          console.error("MongoDB fallback error:", mongoError);
        }
      }
      
      return null;
    }
  }
}

// Create a singleton instance
export const machineDatabaseService = new MachineDatabaseService();
